"""
This is a company machine learning model predicting expenses done by a company on advertisement

independent variable --> company revenue
dependent variable --> advertisement expenses

The approximate efficiency (R-square) of model is
    -Training data set ---> 0.98+
    -Testing data set ---> 0.98+
"""

import numpy
import matplotlib.pyplot as plt
import random

def companyReg(rev_train,adver_train):
    from sklearn.linear_model import LinearRegression
    reg = LinearRegression().fit(rev_train, adver_train)
    return reg

mininp = int(input("Enter minimum revenue generated by company : "))
maxinp = int(input("Enter maximum revenue generated by company : "))

numpy.random.seed(123) #seed value can be any number

rev = []

for val in range(200):
    rev.append(random.randint(mininp,maxinp))


#---Here taking slope value of y = mx+c is 6.25--

advexp = [val*6.25+numpy.random.normal(scale=40) for val in rev]

rev = numpy.reshape(numpy.array(rev),(len(rev),1))
advexp = numpy.reshape(numpy.array(advexp),(len(advexp),1))

from sklearn.model_selection import train_test_split

rev_train, rev_test, advexp_train, advexp_test = train_test_split(rev, advexp)

reg = companyReg(rev_train, advexp_train)

print("Coefficent : ",reg.coef_)
print("Intercept : ",reg.intercept_)

print("R-square of Training data set : ",reg.score(rev_train, advexp_train))
print("R-square of Testing data set : ",reg.score(rev_test, advexp_test))

plt.figure(figsize=(10,10))
plt.scatter(rev_train, advexp_train, color="g", label="Train data")
plt.scatter(rev_test, advexp_test, color='b', label="Testing data")

plt.plot(rev_test,reg.predict(rev_test))

plt.xlabel('Revenue')
plt.ylabel('Advertisement Expenditure')
plt.legend(loc=2)
plt.show()
